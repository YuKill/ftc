%{
#include "Analysis/UtilLex.h"
#include "${BISON_Parser_OUTPUT_HEADER}"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
%}

%option stack
%option yylineno

%{
/* This keeps track of the location on the input code */
int yycolumn;
#define YY_USER_ACTION yylloc.first_line = yylloc.last_line = yylineno; \
  yylloc.first_column = yycolumn; yylloc.last_column = yycolumn+yyleng-1; \
  yycolumn += yyleng;
%}

%x STRING ESCAPE CONTROL
%x COMMENT

BLNK  [\n\r\t ]

ASCIIC [1-9][0-9]{1,2}
MLSTR {BLNK}+\\

NESC  [^nt\^\"{ASCIIC}{MLSTR}]
NCTR  [^\@G-M\?]

%%

%{
int   StringBufMax;
char *StringBuf;
char *StringBufPtr;
%}

([1-9]+[0-9]*|"0")        { return INT; }
[0-9]+"."[0-9]+           { return FLT; }

\"                        { 
                            yy_push_state(STRING);     
                            StringBufMax = STDLEN;
                            StringBuf    = (char*) malloc(STDLEN);
                            StringBufPtr = StringBuf;
                          }

<STRING>{
\"                        { 
                            yy_pop_state(); 
                            *StringBufPtr = '\0';
                            return STR; 
                          }
\\                        { yy_push_state(ESCAPE); }
[^\"\\\n\r]+              { 
                            copyToBuffer(&StringBuf, &StringBufPtr, 
                              &StringBufMax, yytext);
                          }
[\n\r]                    { yycolumn = 1; }
<<EOF>>                   { yyerror("LexicalError: String not terminated."); }
}

<ESCAPE>{
{BLNK}+\\                 { yy_pop_state(); }
n                         { 
                            copyToBufferChar(&StringBuf, &StringBufPtr, 
                              &StringBufMax, '\n');
                            yy_pop_state();
                          }
t                         { 
                            copyToBufferChar(&StringBuf, &StringBufPtr, 
                              &StringBufMax, '\t');
                            yy_pop_state();
                          }
[1-9]+[0-9]{1,2}          { 
                            copyToBufferChar(&StringBuf, &StringBufPtr, 
                              &StringBufMax, atoi(yytext));
                            yy_pop_state();
                          } 
\^                        { yy_push_state(CONTROL); }
{NESC}                    {   
                            yyerror("LexicalError: Escaped character '%s' not recognized.", yytext); 
                            yy_pop_state();
                          }
}

<CONTROL>{
\@                        { 
                            copyToBufferChar(&StringBuf, &StringBufPtr, 
                              &StringBufMax, '\0');
                            yy_pop_state();
                            yy_pop_state();
                          }
G                         { 
                            copyToBufferChar(&StringBuf, &StringBufPtr, 
                              &StringBufMax, '\a');
                            yy_pop_state();
                            yy_pop_state();
                          }
H                         { 
                            copyToBufferChar(&StringBuf, &StringBufPtr, 
                              &StringBufMax, '\b');
                            yy_pop_state();
                            yy_pop_state();
                          }
I                         { 
                            copyToBufferChar(&StringBuf, &StringBufPtr, 
                              &StringBufMax, '\t');
                            yy_pop_state();
                            yy_pop_state();
                          }
J                         { 
                            copyToBufferChar(&StringBuf, &StringBufPtr, 
                              &StringBufMax, '\n');
                            yy_pop_state();
                            yy_pop_state();
                          }
K                         { 
                            copyToBufferChar(&StringBuf, &StringBufPtr, 
                              &StringBufMax, '\v');
                            yy_pop_state();
                            yy_pop_state();
                          }
L                         { 
                            copyToBufferChar(&StringBuf, &StringBufPtr, 
                              &StringBufMax, '\f');
                            yy_pop_state();
                            yy_pop_state();
                          }
M                         { 
                            copyToBufferChar(&StringBuf, &StringBufPtr, 
                              &StringBufMax, '\r');
                            yy_pop_state();
                            yy_pop_state();
                          }
\?                        { 
                            copyToBufferChar(&StringBuf, &StringBufPtr, 
                              &StringBufMax, '\127');
                            yy_pop_state();
                            yy_pop_state();
                          }
{NCTR}                    { 
                            yyerror("LexicalError: Control character '%s' not recognized.", yytext); 
                            yy_pop_state();
                            yy_pop_state();
                          }
}

"int"                     { return INTT; }
"float"                   { return FLTT; }
"string"                  { return STRT; }
"answer"                  { return ANST; }
"cont"                    { return CNTT; }
"stringConsumer"          { return STRCT; }

"type"                    { return TYPE; }
"let"                     { return LET;  }
"in"                      { return IN;   }
"end"                     { return END;  }
"function"                { return FUN;  }
"var"                     { return VAR;  }
"if"                      { return IF;   }
"then"                    { return THEN; }
"else"                    { return ELSE; }
"array"                   { return ARRY; }
"of"                      { return OF;   }
"nil"                     { return NIL;  }

"/*"                      { yy_push_state(COMMENT); }
<COMMENT>"*/"             { yy_pop_state(); }
<COMMENT>"/*"             { yy_push_state(COMMENT); }
<COMMENT>[\n\r]           { yycolumn = 1; }
<COMMENT><<EOF>>          { yyerror("LexicalError: Comment not terminated."); }
<COMMENT>.

"+"                       { return PLS;   }
"-"                       { return MIN;   }
"/"                       { return DIV;   }
"*"                       { return MUL;   }
":="                      { return ASGN;  }
"="                       { return EQ;    }
"<>"                      { return DIF;   }
"<"                       { return LT;    }
"<="                      { return LE;    }
">"                       { return GT;    }
">="                      { return GE;    }
"&"                       { return AND;   }
"|"                       { return OR;    }

"->"                      { return INTO;  }

"("                       { return LPAR;  }
")"                       { return RPAR;  }
"["                       { return LSQB;  }
"]"                       { return RSQB;  }
"{"                       { return LBRK;  }
"}"                       { return RBRK;  }
";"                       { return SMCL;  }
":"                       { return COLL;  }
","                       { return COMM;  }
"."                       { return PT;    }

[a-zA-Z]+[0-9a-zA-Z_]*    { return ID; }

[\t ]                     { /* eat some spaces */ }
[\n\r]                    { yycolumn = 1; }

.                         { yyerror("LexicalError: Token '%s' not recognized.", yytext); }

%%

/*
int main(int argc, char **argv) {
  int n;
  if (argc > 1) {
    printf("File: %s\n", argv[1]);
    yyin = fopen(argv[1], "r");
  }
  while ((n = yylex())) {
    printf("Token No: %d\n", n);
  }
  return 0;
}
*/
